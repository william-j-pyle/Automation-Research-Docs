substitutions:
  #Device Information
  device_name: 'nspanel-craftroom'
  device_description: 'Sonoff NSPanel Test'
  device_web_server_port: '80'
  #Display Level Information
  hmi_project: 'nspanel-quicktest-nextion'
  tft_location: 'http://192.168.86.47:8123/local/nspanel/'
  device_home_page: '0'
  device_home_page_name: 'home'
  device_notification_page: '7'
  device_notification_page_name: 'notify'
  device_notification_alert: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
  device_screensaver_page: '1'
  device_screensaver_page_name: 'screensaver'
  device_connecting_page: '2'
  device_connecting_page_name: 'connecting'
  #ESPHome
  ota_password: '36215290193febd10708246414338486'
  #HomeAssistant
  api_encryption_key: 'tbhrlha8hK0xe1Rvd75SUTVg191k5PN8HCsfyh1gBJY='
  timezone: 'US/Central'
  #Defaults
  screen_default_brightness: '50'

esphome:
  name: $device_name
  comment: $device_description

esp32:
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: $device_name
    password: !secret fallback_password

web_server:
  port: $device_web_server_port  

ota:
  password: $ota_password

logger:
  level: DEBUG
  logs:
    sensor: WARN
    resistance: WARN
    text_sensor: WARN
    ntc: WARN

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h

display:
  - platform: nextion
    id: nxtDisplay
    uart_id: nxtUart
    tft_url: ${tft_location}${hmi_project}.tft
    brightness: 100%
    on_setup:
      then:
        - lambda: id(nxtDisplay).goto_page("$device_connecting_page_name");

uart:
  id: nxtUart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

rtttl:
  id: buzzer
  output: rtttlOutput

output:
  - platform: ledc
    id: rtttlOutput
    pin:
      number: 21

api:
  encryption:
    key: $api_encryption_key
  services:

    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: lambda 'return song_str;'

    - service: upload_tft
      then:
        - lambda: 'id(nxtDisplay)->upload_tft();'

    - service: set_page
      variables:
        page: int
      then:
        - lambda: id(nxtDisplay).send_command_printf("page %i", page);

    - service: notification
      variables:
        header: string
        message: string
      then:
        - lambda: |-
            id(nxtDisplay).set_component_text_printf("${device_notification_page_name}.head", "%s", header.c_str());
            id(nxtDisplay).set_component_text_printf("${device_notification_page_name}.body", "%s", message.c_str());
            id(nxtDisplay).send_command_printf("page %i", $device_notification_page);
        - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
        - delay: 15s
        - lambda: |-
            id(nxtDisplay).send_command_printf("page %i", $device_notification_page);
            id(nxtDisplay).set_component_text_printf("${device_notification_page_name}.head", " ");
            id(nxtDisplay).set_component_text_printf("${device_notification_page_name}.body", " ");
            id(nxtDisplay).goto_page("$device_home_page_name");

    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(nxtDisplay).send_command_printf("%s", cmd.c_str());'

    - service: screen_wakeup
      then:
        - lambda: |-
            id(nxtDisplay).goto_page("$device_home_page_name");

    - service: screen_sleep
      then:
        - lambda: |-
            id(nxtDisplay).goto_page("$device_screensaver_page_name");

# Component - Time - fetches time from Home Assistant and updates the display once a minute and when the display is ready at bootup (and time is available).
time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: $timezone
    on_time:
      - seconds: 0
        minutes: '/1'
        #have also seen minutes: '*' - research which is correct
        then:
          - lambda: |-
              auto time_text = id(homeassistant_time).now().strftime("%I:%M");
              auto date_text = id(homeassistant_time).now().strftime("%B %d %Y");
              id(nxtDisplay).set_component_text("${device_home_page_name}.time", time_text.c_str());
              id(nxtDisplay).set_component_text("${device_home_page_name}.date", date_text.c_str());
    on_time_sync:
        then:
          - lambda: |-
              auto time_text = id(homeassistant_time).now().strftime("%I:%M");
              auto date_text = id(homeassistant_time).now().strftime("%B %d %Y");
              id(nxtDisplay).set_component_text("${device_home_page_name}.time", time_text.c_str());
              id(nxtDisplay).set_component_text("${device_home_page_name}.date", date_text.c_str());
   
button:
  - platform: restart
    name: NSPanel Restart
    id: nspanel_test_restart
    device_class: restart
    entity_category: diagnostic
    icon: mdi:restart-alert

  - platform: template
    name: Upload TFT
    id: nspanel_test_upload_tft
    entity_category: config
    icon: mdi:briefcase-upload-outline
    on_press:
      - lambda: 'id(nxtDisplay).upload_tft();'

  - platform: template
    name: Test Buzzer
    id: nspanel_test_buzzer
    icon: mdi:bullhorn-outline
    entity_category: diagnostic
    on_press:
      - rtttl.play: $device_notification_alert

  - platform: template
    name: WakeUp
    id: nspanel_test_wakeup
    entity_category: diagnostic
    on_press:
      - lambda: |-
          id(nxtDisplay).goto_page("$device_home_page_name");

binary_sensor:

  # Left button below the display
  - platform: gpio
    name: Left Button
    id: nspanel_test_button_left
    pin:
      number: 14
      inverted: true
    on_click:
      - switch.toggle: relay_1

  # Right button below the display
  - platform: gpio
    name: Right Button
    id: nspanel_test_button_right
    pin:
      number: 27
      inverted: true
    on_click:
      - switch.toggle: relay_2

sensor:
  # Internal temperature sensor, adc value
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Internal temperature sensor, adc reading converted to resistance (calculation) 
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  # Internal temperature sensor, resistance to temperature (calculation)
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25Â°C
      reference_resistance: 10kOhm
    name: $device_name Temperature


  # Current page displayed on the HMi
  - platform: nextion
    name: Current display page
    id: nxtDisplay_current_page
    variable_name: dp
    update_interval: 1s

  # Temperature outside, fetched from HA
  - platform: homeassistant
    id: current_temperature
    entity_id: sensor.temperaturecraftroom_temperature
    #attribute: temperature
    on_value:
      then:
        - lambda: id(nxtDisplay).set_component_text_printf("home.temp", "%.0f ""\xb0""F", id(current_temperature).state);

  # Temperature outside feels like, fetched from HA
  - platform: homeassistant
    id: current_humidity
    entity_id: sensor.temperaturecraftroom_humidity
    on_value:
      then:
        - lambda: id(nxtDisplay).set_component_text_printf("home.humidity", "%.0f %s", id(current_humidity).state,"%");

  - platform: nextion
    name: Brightness
    id: nspanel_test_brightness
    variable_name: scrBright
    update_interval: 1s    
    entity_category: config
    unit_of_measurement: '%'

  - platform: nextion
    name: Brightness dimdown
    id: nspanel_test_dim
    variable_name: scrDim
    update_interval: 1s    
    entity_category: config
    unit_of_measurement: '%'

text_sensor:
  - platform: version
    id: nspanel_test_esphome_version
    entity_category: diagnostic
    name: $device_name ESPHome Version

switch:
  - platform: nextion
    name: Disable dim-down
    id: nspanel_test_dim_disable
    variable_name: disDim
    entity_category: config
    update_interval: 2s

  - platform: nextion
    name: Disable Screensaver
    id: nspanel_test_sleep_disable
    variable_name: disSleep
    entity_category: config
    update_interval: 2s

  - platform: gpio
    name: Left Relay
    id: relay_1
    pin:
      number: 22
    on_turn_on:
        - lambda: |-
            if (id(nxtDisplay_current_page).state==0) {
              id(nxtDisplay).send_command_printf("sec=%i", 0);
            } else {
              id(nxtDisplay).goto_page("$device_home_page_name");
            }        
            id(nxtDisplay).set_component_value("home.relay_l", 1);
    on_turn_off:
        - lambda: |-
            if (id(nxtDisplay_current_page).state==0) {
              id(nxtDisplay).send_command_printf("sec=%i", 0);
            } else {
              id(nxtDisplay).goto_page("$device_home_page_name");
            }        
            id(nxtDisplay).set_component_value("home.relay_l", 0);

  - platform: gpio
    name: Right Relay
    id: relay_2
    pin:
      number: 19
    on_turn_on:
        - lambda: |-
            if (id(nxtDisplay_current_page).state==0) {
              id(nxtDisplay).send_command_printf("sec=%i", 0);
            } else {
              id(nxtDisplay).goto_page("$device_home_page_name");
            }        
            id(nxtDisplay).set_component_value("home.relay_r", 1);
    on_turn_off:
        - lambda: |-
            if (id(nxtDisplay_current_page).state==0) {
              id(nxtDisplay).send_command_printf("sec=%i", 0);
            } else {
              id(nxtDisplay).goto_page("$device_home_page_name");
            }        
            id(nxtDisplay).set_component_value("home.relay_r", 0);

  # Pin 4 high to power display
  - platform: gpio
    name: Screen Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

